# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class CalorizatorMainrecipes(models.Model):
    category = models.TextField(blank=True, null=True)
    portionscount = models.TextField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    tags = models.TextField(blank=True, null=True)
    actions = models.TextField(blank=True, null=True)
    igredients_table = models.TextField(blank=True, null=True)
    igredients_list = models.TextField(blank=True, null=True)
    recid = models.AutoField()

    class Meta:
        managed = False
        db_table = 'calorizator_mainrecipes'


class CalorizatorRecipes(models.Model):
    category = models.TextField(blank=True, null=True)
    recurl = models.TextField(blank=True, null=True)
    portionscount = models.TextField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    tags = models.TextField(blank=True, null=True)
    actions = models.TextField(blank=True, null=True)
    re = models.TextField(blank=True, null=True)
    igredients_table = models.TextField(blank=True, null=True)
    igredients_list = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'calorizator_recipes'


class ClrztrMnrcpsDtls(models.Model):
    recid = models.IntegerField(blank=True, null=True)
    dtlid = models.BigIntegerField(blank=True, null=True)
    dtlname = models.TextField(blank=True, null=True)
    dtlmeasure = models.TextField(blank=True, null=True)
    dtlgrams = models.TextField(blank=True, null=True)
    dtlb = models.TextField(blank=True, null=True)
    dtlg = models.TextField(blank=True, null=True)
    dtlu = models.TextField(blank=True, null=True)
    dtlkc = models.TextField(blank=True, null=True)
    dtltype = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'clrztr_mnrcps_dtls'


class ClrztrMnrcpsTags(models.Model):
    recid = models.IntegerField(blank=True, null=True)
    tagid = models.BigIntegerField(blank=True, null=True)
    tagitem = models.TextField(blank=True, null=True)
    tagtype = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'clrztr_mnrcps_tags'


class Components(models.Model):
    component_uid = models.UUIDField(primary_key=True)
    component_id = models.IntegerField()
    component_name = models.TextField(blank=True, null=True)
    component_type = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'components'


class ComponentsTranslations(models.Model):
    item_uid = models.ForeignKey(Components, models.DO_NOTHING, db_column='item_uid', blank=True, null=True)
    language_code = models.ForeignKey('Languages', models.DO_NOTHING, db_column='language_code', blank=True, null=True)
    translation = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'components_translations'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class FaProductCategory(models.Model):
    id = models.IntegerField(blank=True, null=True)
    id_html = models.TextField(blank=True, null=True)
    name1 = models.TextField(blank=True, null=True)
    name2 = models.TextField(blank=True, null=True)
    name3 = models.TextField(blank=True, null=True)
    product_uid = models.UUIDField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fa_product_category'


class FaProducts(models.Model):
    name = models.TextField(blank=True, null=True)
    cat1 = models.TextField(blank=True, null=True)
    kkal = models.TextField(blank=True, null=True)
    proteine = models.TextField(blank=True, null=True)
    fats = models.TextField(blank=True, null=True)
    carbohydrates = models.TextField(blank=True, null=True)
    water = models.TextField(blank=True, null=True)
    ash = models.TextField(blank=True, null=True)
    cellulose = models.TextField(blank=True, null=True)
    starch = models.TextField(blank=True, null=True)
    sugars = models.TextField(blank=True, null=True)
    cholesterol = models.TextField(blank=True, null=True)
    transfat = models.TextField(blank=True, null=True)
    calcium = models.TextField(blank=True, null=True)
    copper = models.TextField(blank=True, null=True)
    fluorine = models.TextField(blank=True, null=True)
    iron = models.TextField(blank=True, null=True)
    magnesium = models.TextField(blank=True, null=True)
    manganese = models.TextField(blank=True, null=True)
    phosphorus = models.TextField(blank=True, null=True)
    potassium = models.TextField(blank=True, null=True)
    selenium = models.TextField(blank=True, null=True)
    sodium = models.TextField(blank=True, null=True)
    zinc = models.TextField(blank=True, null=True)
    alfacarotine = models.TextField(blank=True, null=True)
    betacarotine = models.TextField(blank=True, null=True)
    vita = models.TextField(blank=True, null=True)
    vitb1 = models.TextField(blank=True, null=True)
    vitb12 = models.TextField(blank=True, null=True)
    vitb2 = models.TextField(blank=True, null=True)
    vitb3 = models.TextField(blank=True, null=True)
    vitb4 = models.TextField(blank=True, null=True)
    vitb5 = models.TextField(blank=True, null=True)
    vitb6 = models.TextField(blank=True, null=True)
    vitb9 = models.TextField(blank=True, null=True)
    vitc = models.TextField(blank=True, null=True)
    vitd = models.TextField(blank=True, null=True)
    vitd2 = models.TextField(blank=True, null=True)
    vitd3 = models.TextField(blank=True, null=True)
    vite = models.TextField(blank=True, null=True)
    vitk = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fa_products'


class FaVsGctUnionTmp(models.Model):
    src = models.TextField(blank=True, null=True)
    id_html = models.IntegerField(blank=True, null=True)
    picture_name = models.TextField(blank=True, null=True)
    product_uid = models.UUIDField(blank=True, null=True)
    product_category = models.TextField(blank=True, null=True)
    product_long_name = models.TextField(blank=True, null=True)
    product_name = models.TextField(blank=True, null=True)
    product_state = models.TextField(blank=True, null=True)
    kkal = models.TextField(blank=True, null=True)
    water_g = models.TextField(blank=True, null=True)
    protein_g = models.TextField(blank=True, null=True)
    fat_g = models.TextField(blank=True, null=True)
    carbohydrateall_g = models.TextField(blank=True, null=True)
    cellulose_g = models.TextField(blank=True, null=True)
    sugars_g = models.TextField(blank=True, null=True)
    starch_g = models.TextField(blank=True, null=True)
    ash_g = models.TextField(blank=True, null=True)
    calcium_mg = models.TextField(blank=True, null=True)
    potassium_mg = models.TextField(blank=True, null=True)
    sodium_mg = models.TextField(blank=True, null=True)
    iron_mkg = models.TextField(blank=True, null=True)
    manganese_mkg = models.TextField(blank=True, null=True)
    magnesium_mg = models.TextField(blank=True, null=True)
    fluorine_mkg = models.TextField(blank=True, null=True)
    copper_mkg = models.TextField(blank=True, null=True)
    zinc_mkg = models.TextField(blank=True, null=True)
    phosphorus_mg = models.TextField(blank=True, null=True)
    organicacids_g = models.TextField(blank=True, null=True)
    iodine_mkg = models.TextField(blank=True, null=True)
    cobalt_mkg = models.TextField(blank=True, null=True)
    molybdenum_mkg = models.TextField(blank=True, null=True)
    vita_retinol_mg = models.TextField(blank=True, null=True)
    betacarotene_mg = models.TextField(blank=True, null=True)
    vite_tocopherol_mg = models.TextField(blank=True, null=True)
    vitc_ascorbic_acid_mg = models.TextField(blank=True, null=True)
    vitb1_thiamine_mg = models.TextField(blank=True, null=True)
    vitb2_riboflavin_mg = models.TextField(blank=True, null=True)
    vitbc_folic_acid_mkg = models.TextField(blank=True, null=True)
    pp_niacin_mg = models.TextField(blank=True, null=True)
    digestion_time_h = models.TextField(blank=True, null=True)
    oxidation_prc = models.TextField(blank=True, null=True)
    alkalization_prc = models.TextField(blank=True, null=True)
    pectin_g = models.TextField(blank=True, null=True)
    cholesterol = models.TextField(blank=True, null=True)
    transfat = models.TextField(blank=True, null=True)
    selenium = models.TextField(blank=True, null=True)
    alfacarotine = models.TextField(blank=True, null=True)
    betacarotine = models.TextField(blank=True, null=True)
    vita = models.TextField(blank=True, null=True)
    vitb1 = models.TextField(blank=True, null=True)
    vitb12 = models.TextField(blank=True, null=True)
    vitb2 = models.TextField(blank=True, null=True)
    vitb3 = models.TextField(blank=True, null=True)
    vitb4 = models.TextField(blank=True, null=True)
    vitb5 = models.TextField(blank=True, null=True)
    vitb6 = models.TextField(blank=True, null=True)
    vitb9 = models.TextField(blank=True, null=True)
    vitc = models.TextField(blank=True, null=True)
    vitd = models.TextField(blank=True, null=True)
    vitd2 = models.TextField(blank=True, null=True)
    vitd3 = models.TextField(blank=True, null=True)
    vite = models.TextField(blank=True, null=True)
    vitk = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fa_vs_gct_union_tmp'


class FaVsGctUnionTmp1(models.Model):
    src = models.TextField(blank=True, null=True)
    id_html = models.IntegerField(blank=True, null=True)
    picture_name = models.TextField(blank=True, null=True)
    product_uid = models.UUIDField(blank=True, null=True)
    product_long_name = models.TextField(blank=True, null=True)
    product_name = models.TextField(blank=True, null=True)
    product_category = models.TextField(blank=True, null=True)
    product_type = models.TextField(blank=True, null=True)
    product_state = models.TextField(blank=True, null=True)
    product_cook_type = models.TextField(blank=True, null=True)
    kkal = models.TextField(blank=True, null=True)
    water_g = models.TextField(blank=True, null=True)
    protein_g = models.TextField(blank=True, null=True)
    fat_g = models.TextField(blank=True, null=True)
    carbohydrateall_g = models.TextField(blank=True, null=True)
    cellulose_g = models.TextField(blank=True, null=True)
    sugars_g = models.TextField(blank=True, null=True)
    starch_g = models.TextField(blank=True, null=True)
    ash_g = models.TextField(blank=True, null=True)
    calcium_mg = models.TextField(blank=True, null=True)
    potassium_mg = models.TextField(blank=True, null=True)
    sodium_mg = models.TextField(blank=True, null=True)
    iron_mkg = models.TextField(blank=True, null=True)
    manganese_mkg = models.TextField(blank=True, null=True)
    magnesium_mg = models.TextField(blank=True, null=True)
    fluorine_mkg = models.TextField(blank=True, null=True)
    copper_mkg = models.TextField(blank=True, null=True)
    zinc_mkg = models.TextField(blank=True, null=True)
    phosphorus_mg = models.TextField(blank=True, null=True)
    organicacids_g = models.TextField(blank=True, null=True)
    iodine_mkg = models.TextField(blank=True, null=True)
    cobalt_mkg = models.TextField(blank=True, null=True)
    molybdenum_mkg = models.TextField(blank=True, null=True)
    vita_retinol_mg = models.TextField(blank=True, null=True)
    betacarotene_mg = models.TextField(blank=True, null=True)
    vite_tocopherol_mg = models.TextField(blank=True, null=True)
    vitc_ascorbic_acid_mg = models.TextField(blank=True, null=True)
    vitb1_thiamine_mg = models.TextField(blank=True, null=True)
    vitb2_riboflavin_mg = models.TextField(blank=True, null=True)
    vitbc_folic_acid_mkg = models.TextField(blank=True, null=True)
    pp_niacin_mg = models.TextField(blank=True, null=True)
    digestion_time_h = models.TextField(blank=True, null=True)
    oxidation_prc = models.TextField(blank=True, null=True)
    alkalization_prc = models.TextField(blank=True, null=True)
    pectin_g = models.TextField(blank=True, null=True)
    cholesterol = models.TextField(blank=True, null=True)
    transfat = models.TextField(blank=True, null=True)
    selenium = models.TextField(blank=True, null=True)
    alfacarotine = models.TextField(blank=True, null=True)
    betacarotine = models.TextField(blank=True, null=True)
    vita = models.TextField(blank=True, null=True)
    vitb1 = models.TextField(blank=True, null=True)
    vitb12 = models.TextField(blank=True, null=True)
    vitb2 = models.TextField(blank=True, null=True)
    vitb3 = models.TextField(blank=True, null=True)
    vitb4 = models.TextField(blank=True, null=True)
    vitb5 = models.TextField(blank=True, null=True)
    vitb6 = models.TextField(blank=True, null=True)
    vitb9 = models.TextField(blank=True, null=True)
    vitc = models.TextField(blank=True, null=True)
    vitd = models.TextField(blank=True, null=True)
    vitd2 = models.TextField(blank=True, null=True)
    vitd3 = models.TextField(blank=True, null=True)
    vite = models.TextField(blank=True, null=True)
    vitk = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fa_vs_gct_union_tmp1'


class FaVsGctUnionTmp2(models.Model):
    tmp_id = models.BigIntegerField(blank=True, null=True)
    src = models.TextField(blank=True, null=True)
    id_html = models.IntegerField(blank=True, null=True)
    picture_name = models.TextField(blank=True, null=True)
    product_uid = models.UUIDField(blank=True, null=True)
    product_long_name = models.TextField(blank=True, null=True)
    product_name = models.TextField(blank=True, null=True)
    product_category = models.TextField(blank=True, null=True)
    product_type = models.TextField(blank=True, null=True)
    product_state = models.TextField(blank=True, null=True)
    product_cook_type = models.TextField(blank=True, null=True)
    kkal = models.FloatField(blank=True, null=True)
    kkal_mu = models.TextField(blank=True, null=True)
    water = models.FloatField(blank=True, null=True)
    water_mu = models.TextField(blank=True, null=True)
    protein = models.FloatField(blank=True, null=True)
    protein_mu = models.TextField(blank=True, null=True)
    fat = models.FloatField(blank=True, null=True)
    fat_mu = models.TextField(blank=True, null=True)
    carbohydrateall = models.FloatField(blank=True, null=True)
    carbohydrateall_mu = models.TextField(blank=True, null=True)
    cellulose = models.FloatField(blank=True, null=True)
    cellulose_mu = models.TextField(blank=True, null=True)
    sugars = models.FloatField(blank=True, null=True)
    sugars_mu = models.TextField(blank=True, null=True)
    starch = models.FloatField(blank=True, null=True)
    starch_mu = models.TextField(blank=True, null=True)
    ash = models.FloatField(blank=True, null=True)
    ash_mu = models.TextField(blank=True, null=True)
    organicacids = models.FloatField(blank=True, null=True)
    organicacids_mu = models.TextField(blank=True, null=True)
    pectin = models.FloatField(blank=True, null=True)
    pectin_mu = models.TextField(blank=True, null=True)
    calcium = models.FloatField(blank=True, null=True)
    calcium_mu = models.TextField(blank=True, null=True)
    potassium = models.FloatField(blank=True, null=True)
    potassium_mu = models.TextField(blank=True, null=True)
    sodium = models.FloatField(blank=True, null=True)
    sodium_mu = models.TextField(blank=True, null=True)
    magnesium = models.FloatField(blank=True, null=True)
    magnesium_mu = models.TextField(blank=True, null=True)
    phosphorus = models.FloatField(blank=True, null=True)
    phosphorus_mu = models.TextField(blank=True, null=True)
    vita_retinol = models.FloatField(blank=True, null=True)
    vita_retinol_mu = models.TextField(blank=True, null=True)
    betacarotene = models.FloatField(blank=True, null=True)
    betacarotene_mu = models.TextField(blank=True, null=True)
    vite_tocopherol = models.FloatField(blank=True, null=True)
    vite_tocopherol_mu = models.TextField(blank=True, null=True)
    vitc_ascorbic_acid = models.FloatField(blank=True, null=True)
    vitc_ascorbic_acid_mu = models.TextField(blank=True, null=True)
    vitb1_thiamine = models.FloatField(blank=True, null=True)
    vitb1_thiamine_mu = models.TextField(blank=True, null=True)
    vitb2_riboflavin = models.FloatField(blank=True, null=True)
    vitb2_riboflavin_mu = models.TextField(blank=True, null=True)
    pp_niacin = models.FloatField(blank=True, null=True)
    pp_niacin_mu = models.TextField(blank=True, null=True)
    iron = models.FloatField(blank=True, null=True)
    iron_mu = models.TextField(blank=True, null=True)
    manganese = models.FloatField(blank=True, null=True)
    manganese_mu = models.TextField(blank=True, null=True)
    fluorine = models.FloatField(blank=True, null=True)
    fluorine_mu = models.TextField(blank=True, null=True)
    copper = models.FloatField(blank=True, null=True)
    copper_mu = models.TextField(blank=True, null=True)
    zinc = models.FloatField(blank=True, null=True)
    zinc_mu = models.TextField(blank=True, null=True)
    iodine = models.FloatField(blank=True, null=True)
    iodine_mu = models.TextField(blank=True, null=True)
    cobalt = models.FloatField(blank=True, null=True)
    cobalt_mu = models.TextField(blank=True, null=True)
    molybdenum = models.FloatField(blank=True, null=True)
    molybdenum_mu = models.TextField(blank=True, null=True)
    vitbc_folic_acid = models.FloatField(blank=True, null=True)
    vitbc_folic_acid_mu = models.TextField(blank=True, null=True)
    digestion_time_h = models.FloatField(blank=True, null=True)
    digestion_time_mu = models.TextField(blank=True, null=True)
    oxidation_prc = models.FloatField(blank=True, null=True)
    oxidation_mu = models.TextField(blank=True, null=True)
    alkalization_prc = models.FloatField(blank=True, null=True)
    alkalization_mu = models.TextField(blank=True, null=True)
    cholesterol = models.FloatField(blank=True, null=True)
    cholesterol_mu = models.TextField(blank=True, null=True)
    transfat = models.FloatField(blank=True, null=True)
    transfat_mu = models.TextField(blank=True, null=True)
    selenium = models.FloatField(blank=True, null=True)
    selenium_mu = models.TextField(blank=True, null=True)
    alfacarotine = models.FloatField(blank=True, null=True)
    alfacarotine_mu = models.TextField(blank=True, null=True)
    betacarotine = models.FloatField(blank=True, null=True)
    betacarotine_mu = models.TextField(blank=True, null=True)
    vita = models.FloatField(blank=True, null=True)
    vita_mu = models.TextField(blank=True, null=True)
    vitb1 = models.FloatField(blank=True, null=True)
    vitb1_mu = models.TextField(blank=True, null=True)
    vitb12 = models.FloatField(blank=True, null=True)
    vitb12_mu = models.TextField(blank=True, null=True)
    vitb2 = models.FloatField(blank=True, null=True)
    vitb2_mu = models.TextField(blank=True, null=True)
    vitb3 = models.FloatField(blank=True, null=True)
    vitb3_mu = models.TextField(blank=True, null=True)
    vitb4 = models.FloatField(blank=True, null=True)
    vitb4_mu = models.TextField(blank=True, null=True)
    vitb5 = models.FloatField(blank=True, null=True)
    vitb5_mu = models.TextField(blank=True, null=True)
    vitb6 = models.FloatField(blank=True, null=True)
    vitb6_mu = models.TextField(blank=True, null=True)
    vitb9 = models.FloatField(blank=True, null=True)
    vitb9_mu = models.TextField(blank=True, null=True)
    vitc = models.FloatField(blank=True, null=True)
    vitc_mu = models.TextField(blank=True, null=True)
    vitd = models.FloatField(blank=True, null=True)
    vitd_mu = models.TextField(blank=True, null=True)
    vitd2 = models.FloatField(blank=True, null=True)
    vitd2_mu = models.TextField(blank=True, null=True)
    vitd3 = models.FloatField(blank=True, null=True)
    vitd3_mu = models.TextField(blank=True, null=True)
    vite = models.FloatField(blank=True, null=True)
    vite_mu = models.TextField(blank=True, null=True)
    vitk = models.FloatField(blank=True, null=True)
    vitk_mu = models.TextField(blank=True, null=True)
    component_uid = models.UUIDField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'fa_vs_gct_union_tmp2'


class Goodschemicaltab(models.Model):
    category = models.TextField(blank=True, null=True)
    productname = models.TextField(blank=True, null=True)
    water_g = models.TextField(blank=True, null=True)
    protein_g = models.TextField(blank=True, null=True)
    fat_g = models.TextField(blank=True, null=True)
    carbohydrateall_g = models.TextField(blank=True, null=True)
    sugars_g = models.TextField(blank=True, null=True)
    cellulose_g = models.TextField(blank=True, null=True)
    starch_g = models.TextField(blank=True, null=True)
    pectin_g = models.TextField(blank=True, null=True)
    organicacids_g = models.TextField(blank=True, null=True)
    ash_g = models.TextField(blank=True, null=True)
    potassium_mg = models.TextField(blank=True, null=True)
    calcium_mg = models.TextField(blank=True, null=True)
    magnesium_mg = models.TextField(blank=True, null=True)
    sodium_mg = models.TextField(blank=True, null=True)
    phosphorus_mg = models.TextField(blank=True, null=True)
    iron_mkg = models.TextField(blank=True, null=True)
    iodine_mkg = models.TextField(blank=True, null=True)
    cobalt_mkg = models.TextField(blank=True, null=True)
    manganese_mkg = models.TextField(blank=True, null=True)
    copper_mkg = models.TextField(blank=True, null=True)
    molybdenum_mkg = models.TextField(blank=True, null=True)
    fluorine_mkg = models.TextField(blank=True, null=True)
    zinc_mkg = models.TextField(blank=True, null=True)
    vita_retinol_mg = models.TextField(blank=True, null=True)
    betacarotene_mg = models.TextField(blank=True, null=True)
    vite_tocopherol_mg = models.TextField(blank=True, null=True)
    vitc_ascorbic_acid_mg = models.TextField(blank=True, null=True)
    vitb1_thiamine_mg = models.TextField(blank=True, null=True)
    vitb2_riboflavin_mg = models.TextField(blank=True, null=True)
    vitbc_folic_acid_mkg = models.TextField(blank=True, null=True)
    pp_niacin_mg = models.TextField(blank=True, null=True)
    kcal = models.TextField(blank=True, null=True)
    digestion_time_h = models.TextField(blank=True, null=True)
    oxidation_prc = models.TextField(blank=True, null=True)
    alkalization_prc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'goodschemicaltab'


class GoodschemicaltabCpy(models.Model):
    category = models.TextField(blank=True, null=True)
    productname = models.TextField(blank=True, null=True)
    water_g = models.TextField(blank=True, null=True)
    protein_g = models.TextField(blank=True, null=True)
    fat_g = models.TextField(blank=True, null=True)
    carbohydrateall_g = models.TextField(blank=True, null=True)
    sugars_g = models.TextField(blank=True, null=True)
    cellulose_g = models.TextField(blank=True, null=True)
    starch_g = models.TextField(blank=True, null=True)
    pectin_g = models.TextField(blank=True, null=True)
    organicacids_g = models.TextField(blank=True, null=True)
    ash_g = models.TextField(blank=True, null=True)
    potassium_mg = models.TextField(blank=True, null=True)
    calcium_mg = models.TextField(blank=True, null=True)
    magnesium_mg = models.TextField(blank=True, null=True)
    sodium_mg = models.TextField(blank=True, null=True)
    phosphorus_mg = models.TextField(blank=True, null=True)
    iron_mkg = models.TextField(blank=True, null=True)
    iodine_mkg = models.TextField(blank=True, null=True)
    cobalt_mkg = models.TextField(blank=True, null=True)
    manganese_mkg = models.TextField(blank=True, null=True)
    copper_mkg = models.TextField(blank=True, null=True)
    molybdenum_mkg = models.TextField(blank=True, null=True)
    fluorine_mkg = models.TextField(blank=True, null=True)
    zinc_mkg = models.TextField(blank=True, null=True)
    vita_retinol_mg = models.TextField(blank=True, null=True)
    betacarotene_mg = models.TextField(blank=True, null=True)
    vite_tocopherol_mg = models.TextField(blank=True, null=True)
    vitc_ascorbic_acid_mg = models.TextField(blank=True, null=True)
    vitb1_thiamine_mg = models.TextField(blank=True, null=True)
    vitb2_riboflavin_mg = models.TextField(blank=True, null=True)
    vitbc_folic_acid_mkg = models.TextField(blank=True, null=True)
    pp_niacin_mg = models.TextField(blank=True, null=True)
    kcal = models.TextField(blank=True, null=True)
    digestion_time_h = models.TextField(blank=True, null=True)
    oxidation_prc = models.TextField(blank=True, null=True)
    alkalization_prc = models.TextField(blank=True, null=True)
    product_uid = models.UUIDField(blank=True, null=True)
    id_picture = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'goodschemicaltab_cpy'


class HfTableAnalize(models.Model):
    table_name = models.CharField(max_length=-1, blank=True, null=True)
    column_name = models.CharField(max_length=-1, blank=True, null=True)
    ordinal_position = models.IntegerField(blank=True, null=True)
    column_default = models.CharField(max_length=-1, blank=True, null=True)
    is_nullable = models.CharField(max_length=3, blank=True, null=True)
    data_type = models.CharField(max_length=-1, blank=True, null=True)
    nullscnt = models.IntegerField(blank=True, null=True)
    field_column_field = models.TextField(db_column='?column?', blank=True, null=True)  # Field renamed to remove unsuitable characters. Field renamed because it started with '_'. Field renamed because it ended with '_'.

    class Meta:
        managed = False
        db_table = 'hf_table_analize'


class ItemAttributes(models.Model):
    item_id = models.IntegerField(blank=True, null=True)
    attribute_name = models.TextField(blank=True, null=True)
    attribute_sizing = models.TextField(blank=True, null=True)
    attribute_val = models.TextField(blank=True, null=True)
    item_uid = models.ForeignKey('Recepies', models.DO_NOTHING, db_column='item_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'item_attributes'


class ItemImages(models.Model):
    item_id = models.IntegerField(blank=True, null=True)
    image_proirity = models.IntegerField(blank=True, null=True)
    image_name = models.TextField(blank=True, null=True)
    item_uid = models.ForeignKey('Recepies', models.DO_NOTHING, db_column='item_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'item_images'


class ItemTags(models.Model):
    item_id = models.IntegerField(blank=True, null=True)
    tag_name = models.TextField(blank=True, null=True)
    item_uid = models.ForeignKey('Recepies', models.DO_NOTHING, db_column='item_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'item_tags'


class ItemTranslations(models.Model):
    item_uid = models.UUIDField(primary_key=True)
    language_code = models.TextField()
    translation = models.TextField(blank=True, null=True)
    table_source = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'item_translations'
        unique_together = (('item_uid', 'language_code'),)


class ItemTypesCatalog(models.Model):
    item_type_uid = models.UUIDField()
    item_type_desc = models.TextField(blank=True, null=True)
    upd_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'item_types_catalog'


class ItemsCatalog(models.Model):
    item_uid = models.UUIDField()
    item_desc = models.TextField(blank=True, null=True)
    upd_date = models.DateTimeField()
    item_type_desc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'items_catalog'


class ItfCalorizatorRecipes(models.Model):
    category = models.TextField(blank=True, null=True)
    recurl = models.TextField(blank=True, null=True)
    portionscount = models.TextField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    tags = models.TextField(blank=True, null=True)
    actions = models.TextField(blank=True, null=True)
    re = models.TextField(blank=True, null=True)
    igredients_table = models.TextField(blank=True, null=True)
    igredients_list = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'itf_calorizator_recipes'


class ItfDailymenurecipes(models.Model):
    protallgrams = models.TextField(blank=True, null=True)
    lipallperc = models.TextField(blank=True, null=True)
    protallperc = models.TextField(blank=True, null=True)
    caloriesall = models.TextField(blank=True, null=True)
    ingredients = models.TextField(blank=True, null=True)
    goodsmatrix = models.TextField(blank=True, null=True)
    cooktime = models.TextField(blank=True, null=True)
    summary = models.TextField(blank=True, null=True)
    carballperc = models.TextField(blank=True, null=True)
    recepiactions = models.TextField(blank=True, null=True)
    lipallgrams = models.TextField(blank=True, null=True)
    carballgrams = models.TextField(blank=True, null=True)
    id = models.AutoField()

    class Meta:
        managed = False
        db_table = 'itf_dailymenurecipes'


class ItfFitauditProducts(models.Model):
    sodium = models.TextField(blank=True, null=True)
    vitb5 = models.TextField(blank=True, null=True)
    sugars = models.TextField(blank=True, null=True)
    selenium = models.TextField(blank=True, null=True)
    transfat = models.TextField(blank=True, null=True)
    vitd2 = models.TextField(blank=True, null=True)
    alfacarotine = models.TextField(blank=True, null=True)
    potassium = models.TextField(blank=True, null=True)
    cellulose = models.TextField(blank=True, null=True)
    water = models.TextField(blank=True, null=True)
    vitk = models.TextField(blank=True, null=True)
    vitd3 = models.TextField(blank=True, null=True)
    kkal = models.TextField(blank=True, null=True)
    vitc = models.TextField(blank=True, null=True)
    vita = models.TextField(blank=True, null=True)
    vite = models.TextField(blank=True, null=True)
    phosphorus = models.TextField(blank=True, null=True)
    vitb2 = models.TextField(blank=True, null=True)
    vitb3 = models.TextField(blank=True, null=True)
    vitb1 = models.TextField(blank=True, null=True)
    vitb6 = models.TextField(blank=True, null=True)
    betacarotine = models.TextField(blank=True, null=True)
    vitb4 = models.TextField(blank=True, null=True)
    starch = models.TextField(blank=True, null=True)
    vitb9 = models.TextField(blank=True, null=True)
    manganese = models.TextField(blank=True, null=True)
    fats = models.TextField(blank=True, null=True)
    calcium = models.TextField(blank=True, null=True)
    magnesium = models.TextField(blank=True, null=True)
    iron = models.TextField(blank=True, null=True)
    ash = models.TextField(blank=True, null=True)
    copper = models.TextField(blank=True, null=True)
    name = models.TextField(blank=True, null=True)
    vitb12 = models.TextField(blank=True, null=True)
    cat1 = models.TextField(blank=True, null=True)
    zinc = models.TextField(blank=True, null=True)
    cholesterol = models.TextField(blank=True, null=True)
    proteine = models.TextField(blank=True, null=True)
    vitd = models.TextField(blank=True, null=True)
    carbohydrates = models.TextField(blank=True, null=True)
    fluorine = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'itf_fitaudit_products'


class ItfGoodsChemicalTab(models.Model):
    category = models.TextField(blank=True, null=True)
    productname = models.TextField(blank=True, null=True)
    water_g = models.TextField(blank=True, null=True)
    protein_g = models.TextField(blank=True, null=True)
    fat_g = models.TextField(blank=True, null=True)
    carbohydrateall_g = models.TextField(blank=True, null=True)
    sugars_g = models.TextField(blank=True, null=True)
    cellulose_g = models.TextField(blank=True, null=True)
    starch_g = models.TextField(blank=True, null=True)
    pectin_g = models.TextField(blank=True, null=True)
    organicacids_g = models.TextField(blank=True, null=True)
    ash_g = models.TextField(blank=True, null=True)
    potassium_mg = models.TextField(blank=True, null=True)
    calcium_mg = models.TextField(blank=True, null=True)
    magnesium_mg = models.TextField(blank=True, null=True)
    sodium_mg = models.TextField(blank=True, null=True)
    phosphorus_mg = models.TextField(blank=True, null=True)
    iron_mkg = models.TextField(blank=True, null=True)
    iodine_mkg = models.TextField(blank=True, null=True)
    cobalt_mkg = models.TextField(blank=True, null=True)
    manganese_mkg = models.TextField(blank=True, null=True)
    copper_mkg = models.TextField(blank=True, null=True)
    molybdenum_mkg = models.TextField(blank=True, null=True)
    fluorine_mkg = models.TextField(blank=True, null=True)
    zinc_mkg = models.TextField(blank=True, null=True)
    vita_retinol_mg = models.TextField(blank=True, null=True)
    betacarotene_mg = models.TextField(blank=True, null=True)
    vite_tocopherol_mg = models.TextField(blank=True, null=True)
    vitc_ascorbic_acid_mg = models.TextField(blank=True, null=True)
    vitb1_thiamine_mg = models.TextField(blank=True, null=True)
    vitb2_riboflavin_mg = models.TextField(blank=True, null=True)
    vitbc_folic_acid_mkg = models.TextField(blank=True, null=True)
    pp_niacin_mg = models.TextField(blank=True, null=True)
    kcal = models.TextField(blank=True, null=True)
    digestion_time_h = models.TextField(blank=True, null=True)
    oxidation_prc = models.TextField(blank=True, null=True)
    alkalization_prc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'itf_goods_chemical_tab'


class ItfReclist(models.Model):
    charact1 = models.TextField(blank=True, null=True)
    charact2 = models.TextField(blank=True, null=True)
    charact3 = models.TextField(blank=True, null=True)
    charact4 = models.TextField(blank=True, null=True)
    charact6 = models.TextField(blank=True, null=True)
    charact7 = models.TextField(blank=True, null=True)
    charact9 = models.TextField(blank=True, null=True)
    desc10 = models.TextField(blank=True, null=True)
    charact5 = models.TextField(blank=True, null=True)
    name10 = models.TextField(blank=True, null=True)
    desc6 = models.TextField(blank=True, null=True)
    name6 = models.TextField(blank=True, null=True)
    name7 = models.TextField(blank=True, null=True)
    name4 = models.TextField(blank=True, null=True)
    name5 = models.TextField(blank=True, null=True)
    name2 = models.TextField(blank=True, null=True)
    name3 = models.TextField(blank=True, null=True)
    charact8 = models.TextField(blank=True, null=True)
    name1 = models.TextField(blank=True, null=True)
    rectype = models.TextField(blank=True, null=True)
    name8 = models.TextField(blank=True, null=True)
    desc1 = models.TextField(blank=True, null=True)
    desc4 = models.TextField(blank=True, null=True)
    desc5 = models.TextField(blank=True, null=True)
    charact10 = models.TextField(blank=True, null=True)
    desc7 = models.TextField(blank=True, null=True)
    desc2 = models.TextField(blank=True, null=True)
    desc3 = models.TextField(blank=True, null=True)
    desc8 = models.TextField(blank=True, null=True)
    desc9 = models.TextField(blank=True, null=True)
    name9 = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'itf_reclist'


class ItfRecview(models.Model):
    ugram = models.TextField(blank=True, null=True)
    weightall = models.TextField(blank=True, null=True)
    ggram = models.TextField(blank=True, null=True)
    bprc = models.TextField(blank=True, null=True)
    bgram = models.TextField(blank=True, null=True)
    portionscnt = models.TextField(blank=True, null=True)
    recname = models.TextField(blank=True, null=True)
    products = models.TextField(blank=True, null=True)
    uprc = models.TextField(blank=True, null=True)
    preptimeacti = models.TextField(blank=True, null=True)
    bgutable = models.TextField(blank=True, null=True)
    preptimeadd = models.TextField(blank=True, null=True)
    gprc = models.TextField(blank=True, null=True)
    prepactions = models.TextField(blank=True, null=True)
    prodtable = models.TextField(blank=True, null=True)
    calall = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'itf_recview'


class Languages(models.Model):
    language_id = models.IntegerField()
    language_code = models.TextField(primary_key=True)
    language_desc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'languages'


class MeasureUnits(models.Model):
    measure_unit_uid = models.UUIDField(primary_key=True)
    measure_unit_id = models.IntegerField()
    measure_unit_name = models.TextField(blank=True, null=True)
    measure_unit_src_url = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'measure_units'


class MeasureUnitsTranslations(models.Model):
    item_uid = models.ForeignKey(MeasureUnits, models.DO_NOTHING, db_column='item_uid', blank=True, null=True)
    language_code = models.ForeignKey(Languages, models.DO_NOTHING, db_column='language_code', blank=True, null=True)
    translation = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'measure_units_translations'


class ProductComponents(models.Model):
    rec_id = models.IntegerField(primary_key=True)
    product_uid = models.ForeignKey('Products', models.DO_NOTHING, db_column='product_uid', blank=True, null=True)
    component_uid = models.ForeignKey(Components, models.DO_NOTHING, db_column='component_uid', blank=True, null=True)
    measure_unit_uid = models.ForeignKey(MeasureUnits, models.DO_NOTHING, db_column='measure_unit_uid', blank=True, null=True)
    item_desc = models.TextField(blank=True, null=True)
    amount = models.FloatField(blank=True, null=True)
    upd_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_components'


class ProductComponentsStgFin(models.Model):
    product_uid = models.UUIDField(blank=True, null=True)
    item_uid = models.UUIDField(blank=True, null=True)
    item_desc = models.TextField(blank=True, null=True)
    amount = models.FloatField(blank=True, null=True)
    measure_unit_uid = models.UUIDField(blank=True, null=True)
    upd_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'product_components_stg_fin'


class ProductImages(models.Model):
    image_id = models.IntegerField(primary_key=True)
    product_uid = models.ForeignKey('Products', models.DO_NOTHING, db_column='product_uid', blank=True, null=True)
    image_proirity = models.IntegerField(blank=True, null=True)
    image_name = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_images'


class ProductTags(models.Model):
    product_uid = models.ForeignKey('Products', models.DO_NOTHING, db_column='product_uid', blank=True, null=True)
    tag_name = models.TextField(blank=True, null=True)
    tag_type = models.TextField(blank=True, null=True)
    rec_id = models.IntegerField(primary_key=True)
    tag_uid = models.ForeignKey('Tags', models.DO_NOTHING, db_column='tag_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_tags'


class ProductTranslations(models.Model):
    item_uid = models.ForeignKey('Products', models.DO_NOTHING, db_column='item_uid', blank=True, null=True)
    language_code = models.ForeignKey(Languages, models.DO_NOTHING, db_column='language_code', blank=True, null=True)
    translation = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_translations'


class Products(models.Model):
    product_uid = models.UUIDField(primary_key=True)
    product_id = models.IntegerField()
    product_name = models.TextField(blank=True, null=True)
    product_src_url = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'products'


class RecepiInstructionTranslations(models.Model):
    instruction_uid = models.ForeignKey('RecepiesInstructions', models.DO_NOTHING, db_column='instruction_uid', blank=True, null=True)
    language_code = models.ForeignKey(Languages, models.DO_NOTHING, db_column='language_code', blank=True, null=True)
    translation = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recepi_instruction_translations'


class RecepiTags(models.Model):
    rec_id = models.IntegerField(primary_key=True)
    recepi_uid = models.ForeignKey('Recepies', models.DO_NOTHING, db_column='recepi_uid', blank=True, null=True)
    tag_uid = models.ForeignKey('Tags', models.DO_NOTHING, db_column='tag_uid', blank=True, null=True)
    tag_name = models.TextField(blank=True, null=True)
    tag_type = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recepi_tags'


class RecepiTranslations(models.Model):
    item_uid = models.ForeignKey('Recepies', models.DO_NOTHING, db_column='item_uid', blank=True, null=True)
    language_code = models.ForeignKey(Languages, models.DO_NOTHING, db_column='language_code', blank=True, null=True)
    translation = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recepi_translations'


class Recepies(models.Model):
    recepi_uid = models.UUIDField(primary_key=True)
    recepi_id = models.IntegerField(blank=True, null=True)
    recepi_name = models.TextField(blank=True, null=True)
    recepi_src_url = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recepies'


class RecepiesIngredients(models.Model):
    recepi_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    ingredient_desc = models.TextField(blank=True, null=True)
    ingredient_amount = models.TextField(blank=True, null=True)
    recepi_uid = models.ForeignKey(Recepies, models.DO_NOTHING, db_column='recepi_uid', blank=True, null=True)
    product_uid = models.ForeignKey(Products, models.DO_NOTHING, db_column='product_uid', blank=True, null=True)
    measure_unit_uid = models.ForeignKey(MeasureUnits, models.DO_NOTHING, db_column='measure_unit_uid', blank=True, null=True)
    amount = models.FloatField(blank=True, null=True)
    measure_unit_desc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recepies_ingredients'


class RecepiesIngredientsStgFin(models.Model):
    recepi_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    ingredient_desc = models.TextField(blank=True, null=True)
    ingredient_amount = models.TextField(blank=True, null=True)
    recepi_uid = models.UUIDField(blank=True, null=True)
    product_uid = models.UUIDField(blank=True, null=True)
    measure_unit_uid = models.UUIDField(blank=True, null=True)
    amount_u = models.FloatField(blank=True, null=True)
    mu_desc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recepies_ingredients_stg_fin'


class RecepiesInstructions(models.Model):
    recepi_id = models.IntegerField(blank=True, null=True)
    step_number = models.IntegerField(blank=True, null=True)
    step_description = models.TextField(blank=True, null=True)
    recepi_uid = models.ForeignKey(Recepies, models.DO_NOTHING, db_column='recepi_uid', blank=True, null=True)
    instruction_uid = models.UUIDField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'recepies_instructions'


class RecepiesInstructions20200630(models.Model):
    recepi_id = models.IntegerField(blank=True, null=True)
    step_number = models.IntegerField(blank=True, null=True)
    step_description = models.TextField(blank=True, null=True)
    recepi_uid = models.UUIDField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recepies_instructions_20200630'


class RecepiesInstructions20201201Old(models.Model):
    recepi_id = models.IntegerField(blank=True, null=True)
    step_number = models.IntegerField(blank=True, null=True)
    step_description = models.TextField(blank=True, null=True)
    recepi_uid = models.ForeignKey(Recepies, models.DO_NOTHING, db_column='recepi_uid', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recepies_instructions_20201201_old'


class Reciplelist(models.Model):
    rectype = models.TextField(blank=True, null=True)
    recname = models.TextField(blank=True, null=True)
    reccharact = models.TextField(blank=True, null=True)
    recdesc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reciplelist'


class Reciplelisttrnc(models.Model):
    rectype = models.TextField(blank=True, null=True)
    recname = models.TextField(blank=True, null=True)
    reccharact = models.TextField(blank=True, null=True)
    recdesc = models.TextField(blank=True, null=True)
    recurl = models.TextField(blank=True, null=True)
    cooktime = models.TextField(blank=True, null=True)
    bgu = models.TextField(blank=True, null=True)
    reccall = models.TextField(blank=True, null=True)
    recwebid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'reciplelisttrnc'


class Recipleproducts(models.Model):
    recid = models.IntegerField(blank=True, null=True)
    prodname = models.TextField(blank=True, null=True)
    prodorder = models.BigIntegerField(blank=True, null=True)
    prodw = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    prodk = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    prodb = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    prodg = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    produ = models.DecimalField(max_digits=65535, decimal_places=65535, blank=True, null=True)
    productslist = models.TextField(blank=True, null=True)
    prodtable = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recipleproducts'


class Recipleviewtrnc(models.Model):
    recwebid = models.IntegerField(blank=True, null=True)
    preptimeadd = models.TextField(blank=True, null=True)
    weightall = models.TextField(blank=True, null=True)
    recname = models.TextField(blank=True, null=True)
    products = models.TextField(blank=True, null=True)
    prepactions = models.TextField(blank=True, null=True)
    portionscnt = models.TextField(blank=True, null=True)
    preptimeacti = models.TextField(blank=True, null=True)
    calall = models.TextField(blank=True, null=True)
    prodtable = models.TextField(blank=True, null=True)
    bgutable = models.TextField(blank=True, null=True)
    bprc = models.TextField(blank=True, null=True)
    bgram = models.TextField(blank=True, null=True)
    ggram = models.TextField(blank=True, null=True)
    gprc = models.TextField(blank=True, null=True)
    ugram = models.TextField(blank=True, null=True)
    uprc = models.TextField(blank=True, null=True)
    recid = models.AutoField()

    class Meta:
        managed = False
        db_table = 'recipleviewtrnc'


class Recipleviewtrnctmp(models.Model):
    recwebid = models.IntegerField(blank=True, null=True)
    preptimeadd = models.TextField(blank=True, null=True)
    weightall = models.TextField(blank=True, null=True)
    recname = models.TextField(blank=True, null=True)
    products = models.TextField(blank=True, null=True)
    prepactions = models.TextField(blank=True, null=True)
    portionscnt = models.TextField(blank=True, null=True)
    preptimeacti = models.TextField(blank=True, null=True)
    calall = models.TextField(blank=True, null=True)
    prodtable = models.TextField(blank=True, null=True)
    bgutable = models.TextField(blank=True, null=True)
    bprc = models.TextField(blank=True, null=True)
    bgram = models.TextField(blank=True, null=True)
    ggram = models.TextField(blank=True, null=True)
    gprc = models.TextField(blank=True, null=True)
    ugram = models.TextField(blank=True, null=True)
    uprc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'recipleviewtrnctmp'


class RelationUserMeal(models.Model):
    id_relation = models.AutoField(primary_key=True)
    type_of_relation = models.TextField()

    class Meta:
        managed = False
        db_table = 'relation_user_meal'


class Tags(models.Model):
    tag_uid = models.UUIDField(primary_key=True)
    tag_name = models.TextField(blank=True, null=True)
    tag_type = models.TextField(blank=True, null=True)
    tag_category = models.ForeignKey('TagsCategory', models.DO_NOTHING, db_column='tag_category', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tags'


class TagsCategory(models.Model):
    id_tag_category = models.AutoField(primary_key=True)
    category_name = models.TextField()

    class Meta:
        managed = False
        db_table = 'tags_category'


class TagsTranslations(models.Model):
    item_uid = models.ForeignKey(Tags, models.DO_NOTHING, db_column='item_uid', blank=True, null=True)
    language_code = models.ForeignKey(Languages, models.DO_NOTHING, db_column='language_code', blank=True, null=True)
    translation = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tags_translations'


class UsersFoodLog(models.Model):
    user_uid = models.ForeignKey('UsersLogin', models.DO_NOTHING, db_column='user_uid', blank=True, null=True)
    recipe_uid = models.ForeignKey(Recepies, models.DO_NOTHING, db_column='recipe_uid', blank=True, null=True)
    recipe_weight = models.IntegerField()
    food_time = models.TextField()
    date_creation = models.DateField()

    class Meta:
        managed = False
        db_table = 'users_food_log'


class UsersLogin(models.Model):
    id_users = models.AutoField(primary_key=True)
    name = models.CharField(max_length=20)
    email = models.CharField(max_length=30)
    password = models.CharField(max_length=10)
    date_of_creation = models.DateTimeField()
    login_flag = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users_login'


class UsersMealAdditionals(models.Model):
    table_id = models.AutoField(primary_key=True)
    id_users = models.ForeignKey(UsersLogin, models.DO_NOTHING, db_column='id_users', blank=True, null=True)
    relation_type = models.ForeignKey(RelationUserMeal, models.DO_NOTHING, db_column='relation_type', blank=True, null=True)
    id_meal = models.ForeignKey(Recepies, models.DO_NOTHING, db_column='id_meal', blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users_meal_additionals'


class UsersProfile(models.Model):
    id_profile = models.OneToOneField(UsersLogin, models.DO_NOTHING, db_column='id_profile', primary_key=True)
    date_of_birth = models.DateField()
    gender = models.TextField()
    user_height = models.DecimalField(max_digits=65535, decimal_places=65535)
    user_weight = models.DecimalField(max_digits=65535, decimal_places=65535)
    type_of_food = models.TextField()
    activity_level = models.DecimalField(max_digits=65535, decimal_places=65535)
    profile_img = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users_profile'
